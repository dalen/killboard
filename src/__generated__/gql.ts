/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  query GetCharacterArmory($id: ID!) {\n    character(id: $id) {\n      items {\n        equipSlot\n        talismans {\n          name\n          rarity\n          iconUrl\n          stats {\n            stat\n            value\n          }\n          buffs {\n            id\n            description\n          }\n        }\n        item {\n          id\n          name\n          careerRestriction\n          description\n          rarity\n          itemLevel\n          iconUrl\n          stats {\n            stat\n            value\n          }\n          type\n          levelRequirement\n          renownRankRequirement\n          slot\n          armor\n          careerRestriction\n          talismanSlots\n          speed\n          dps\n          itemSet {\n            id\n            name\n            items {\n              id\n            }\n            bonuses {\n              itemsRequired\n              bonus {\n                ... on Ability {\n                  description\n                  __typename\n                }\n                ... on ItemStat {\n                  stat\n                  value\n                  percentage\n                  __typename\n                }\n              }\n            }\n          }\n          buffs {\n            id\n            description\n          }\n        }\n      }\n    }\n  }\n": types.GetCharacterArmoryDocument,
    "\n  query GetCharacterInfo($id: ID!) {\n    character(id: $id) {\n      name\n      career\n      level\n      renownRank\n      guildMembership {\n        guild {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.GetCharacterInfoDocument,
    "\n  query GetCharacterLatestSkirmishes(\n    $characterId: ID\n    $where: SkirmishFilterInput\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    skirmishes(\n      characterId: $characterId\n      where: $where\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        primaryZone {\n          id\n          name\n        }\n        primaryZoneArea {\n          id\n          name\n        }\n        startTime\n        endTime\n        topGuildsByPlayers {\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          count\n        }\n        numberOfKills\n        numberOfKillsOrder\n        numberOfKillsDestruction\n        numberOfPlayers\n        numberOfPlayersOrder\n        numberOfPlayersDestruction\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetCharacterLatestSkirmishesDocument,
    "\n  query GetLatestCharacterDeaths(\n    $id: UnsignedInt!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $time: IntOperationFilterInput\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { victimCharacterId: { eq: $id }, time: $time }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetLatestCharacterDeathsDocument,
    "\n  query GetLatestCharacterKills(\n    $id: UnsignedInt!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $time: IntOperationFilterInput\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { killerCharacterId: { eq: $id }, time: $time }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      totalCount\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        attackers {\n          damagePercent\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetLatestCharacterKillsDocument,
    "\n  query GetGuildFeud(\n    $guild1Id: ID!\n    $guild2Id: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    kills(\n      guildFeudFilter: { guild1Id: $guild1Id, guild2Id: $guild2Id }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetGuildFeudDocument,
    "\n  query GetGuildLatestSkirmishes(\n    $guildId: ID\n    $where: SkirmishFilterInput\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    skirmishes(\n      guildId: $guildId\n      where: $where\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        primaryZone {\n          id\n          name\n        }\n        primaryZoneArea {\n          id\n          name\n        }\n        startTime\n        endTime\n        topGuildsByPlayers {\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          count\n        }\n        numberOfKills\n        numberOfKillsOrder\n        numberOfKillsDestruction\n        numberOfPlayers\n        numberOfPlayersOrder\n        numberOfPlayersDestruction\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetGuildLatestSkirmishesDocument,
    "\n  query GetGuildMembers(\n    $id: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    guild(id: $id) {\n      members(first: $first, last: $last, before: $before, after: $after) {\n        nodes {\n          rank {\n            name\n          }\n          character {\n            id\n            name\n            career\n            level\n            renownRank\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n": types.GetGuildMembersDocument,
    "\n  query GetLatestGuildDeaths(\n    $id: UnsignedInt!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $time: IntOperationFilterInput\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { victimGuildId: { eq: $id }, time: $time }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetLatestGuildDeathsDocument,
    "\n  query GetLatestGuildKills(\n    $id: UnsignedInt!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $time: IntOperationFilterInput\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { killerGuildId: { eq: $id }, time: $time }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      totalCount\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetLatestGuildKillsDocument,
    "\n  query GetInstanceRuns(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: InstanceRunFilterInput\n  ) {\n    instanceRuns(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n      order: { start: DESC }\n    ) {\n      nodes {\n        id\n        instanceId\n        start\n        end\n        completed\n        instance {\n          id\n          name\n        }\n        scoreboardEntries {\n          itemRating\n          deaths\n          archetype\n          damage\n          healing\n        }\n        encounters {\n          encounterId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      totalCount\n      averageDuration\n      averageDeaths\n    }\n  }\n": types.GetInstanceRunsDocument,
    "\n  query GetItemPopupInfo($id: ID!) {\n    item(id: $id) {\n      id\n      name\n      description\n      careerRestriction\n      description\n      rarity\n      itemLevel\n      iconUrl\n      stats {\n        stat\n        value\n      }\n      type\n      levelRequirement\n      renownRankRequirement\n      slot\n      armor\n      careerRestriction\n      talismanSlots\n      speed\n      dps\n      itemSet {\n        id\n        name\n        items {\n          id\n          name\n          iconUrl\n        }\n        bonuses {\n          itemsRequired\n          bonus {\n            ... on Ability {\n              description\n              __typename\n            }\n            ... on ItemStat {\n              stat\n              value\n              percentage\n              __typename\n            }\n          }\n        }\n      }\n      buffs {\n        id\n        description\n      }\n      soldByVendors {\n        totalCount\n      }\n      usedToPurchase {\n        totalCount\n      }\n      rewardedFromQuests {\n        totalCount\n      }\n    }\n  }\n": types.GetItemPopupInfoDocument,
    "\n  query GetItemRewardedFromQuests(\n    $itemId: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    item(id: $itemId) {\n      id\n      rewardedFromQuests(\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n      ) {\n        nodes {\n          id\n          name\n          type {\n            isGroup\n            isTravel\n            isTome\n            isRvR\n            isPlayerKill\n            isEpic\n          }\n          repeatableType\n          rewardsChoice {\n            item {\n              id\n              name\n              iconUrl\n            }\n            count\n          }\n          rewardsGiven {\n            item {\n              id\n              name\n              iconUrl\n            }\n            count\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n": types.GetItemRewardedFromQuestsDocument,
    "\n  query GetItemUsedToPurchase(\n    $itemId: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $usableByCareer: Career\n  ) {\n    item(id: $itemId) {\n      id\n      usedToPurchase(\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n        usableByCareer: $usableByCareer\n      ) {\n        nodes {\n          count\n          item {\n            id\n            name\n            iconUrl\n          }\n          price\n          requiredItems {\n            count\n            item {\n              id\n              name\n              iconUrl\n            }\n          }\n          creatures {\n            id\n            name\n            realm\n            spawns {\n              zone {\n                name\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n": types.GetItemUsedToPurchaseDocument,
    "\n  query GetItemSoldByVendors(\n    $itemId: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    item(id: $itemId) {\n      id\n      soldByVendors(\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n      ) {\n        nodes {\n          price\n          requiredItems {\n            count\n            item {\n              id\n              name\n              iconUrl\n            }\n          }\n          creatures {\n            id\n            name\n            realm\n            spawns {\n              zone {\n                name\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n": types.GetItemSoldByVendorsDocument,
    "\n  query GetLatestKills(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    kills(first: $first, last: $last, before: $before, after: $after) {\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetLatestKillsDocument,
    "\n  query GetLatestSkirmishes(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: SkirmishFilterInput\n  ) {\n    skirmishes(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n    ) {\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        primaryZone {\n          id\n          name\n        }\n        primaryZoneArea {\n          id\n          name\n        }\n        startTime\n        endTime\n        topGuildsByPlayers {\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          count\n        }\n        numberOfKills\n        numberOfKillsOrder\n        numberOfKillsDestruction\n        numberOfPlayers\n        numberOfPlayersOrder\n        numberOfPlayersDestruction\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetLatestSkirmishesDocument,
    "\n  query GetMonthlyGuildLeaderboard($year: Int!, $month: Int!) {\n    monthlyGuildKillLeaderboard(year: $year, month: $month) {\n      guild {\n        id\n        name\n        realm\n        heraldry {\n          emblem\n          pattern\n          color1\n          color2\n          shape\n        }\n      }\n      rank\n      kills\n    }\n  }\n": types.GetMonthlyGuildLeaderboardDocument,
    "\n  query GetMonthlyLeaderboard($year: Int!, $month: Int!) {\n    monthlyKillLeaderboard(year: $year, month: $month) {\n      rank\n      kills\n      character {\n        id\n        name\n        career\n        level\n        renownRank\n        guildMembership {\n          guild {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetMonthlyLeaderboardDocument,
    "\n  query GetPlayerFeud(\n    $player1Id: ID!\n    $player2Id: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    kills(\n      playerFeudFilter: { player1Id: $player1Id, player2Id: $player2Id }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetPlayerFeudDocument,
    "\n  query GetRankedLeaderboard(\n    $season: ID\n    $type: RankedLeaderboardRatingType!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    rankedSeason(id: $season) {\n      id\n      mainSeason\n      name\n      start\n      end\n      leaderboard(\n        type: $type\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n      ) {\n        nodes {\n          character {\n            id\n            name\n            career\n          }\n          guild {\n            id\n            name\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          careerRank\n          rank\n          rating\n          wins\n          losses\n          draws\n          renownRank\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n": types.GetRankedLeaderboardDocument,
    "\n  query GetScenarioCount(\n    $characterId: ID\n    $guildId: ID\n    $queueType: ScenarioQueueType\n    $premadeOnly: Boolean\n    $wins: Boolean\n  ) {\n    scenarios(\n      characterId: $characterId\n      guildId: $guildId\n      queueType: $queueType\n      premadeOnly: $premadeOnly\n      wins: $wins\n    ) {\n      totalCount\n    }\n  }\n": types.GetScenarioCountDocument,
    "\n  query GetScenarioHeatmap($id: ID) {\n    killsHeatmap(instanceId: $id) {\n      x\n      y\n      count\n    }\n  }\n": types.GetScenarioHeatmapDocument,
    "\n  query GetScenarioKills(\n    $id: UUID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $from: Int\n    $to: Int\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { time: { gte: $from, lte: $to }, instanceId: { eq: $id } }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      totalCount\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetScenarioKillsDocument,
    "\n  query GetScenarioList(\n    $characterId: ID\n    $guildId: ID\n    $queueType: ScenarioQueueType\n    $premadeOnly: Boolean\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    scenarios(\n      characterId: $characterId\n      guildId: $guildId\n      queueType: $queueType\n      premadeOnly: $premadeOnly\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      totalCount\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        startTime\n        endTime\n        winner\n        points\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetScenarioListDocument,
    "\n  query GetScenarioSkirmishes(\n    $instanceId: UUID\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    skirmishes(\n      where: { instanceId: { eq: $instanceId } }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        primaryZone {\n          id\n          name\n        }\n        primaryZoneArea {\n          id\n          name\n        }\n        startTime\n        endTime\n        topGuildsByPlayers {\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          count\n        }\n        numberOfKills\n        numberOfKillsOrder\n        numberOfKillsDestruction\n        numberOfPlayers\n        numberOfPlayersOrder\n        numberOfPlayersDestruction\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetScenarioSkirmishesDocument,
    "\n  query GetSkirmishDamage($id: ID!) {\n    skirmish(id: $id) {\n      id\n      killDamage {\n        attackerType\n        damageType\n        ability {\n          id\n          name\n          iconUrl\n        }\n        damageAmount\n      }\n    }\n  }\n": types.GetSkirmishDamageDocument,
    "\n  query GetSkirmishDamageByCharacter($id: ID!, $characterId: ID!) {\n    character(id: $characterId) {\n      name\n      renownRank\n      level\n      career\n      guildMembership {\n        guild {\n          id\n          name\n        }\n      }\n    }\n    skirmish(id: $id) {\n      id\n      killDamageByCharacter(id: $characterId) {\n        attackerType\n        damageType\n        ability {\n          id\n          name\n          iconUrl\n        }\n        damageAmount\n      }\n    }\n  }\n": types.GetSkirmishDamageByCharacterDocument,
    "\n  query GetSkirmishKills(\n    $id: UUID!\n    $startTime: Int\n    $endTime: Int\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $soloOnly: Boolean\n  ) {\n    kills(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n      where: {\n        and: [{ time: { gte: $startTime } }, { time: { lte: $endTime } }]\n        skirmishId: { eq: $id }\n      }\n    ) {\n      totalCount\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetSkirmishKillsDocument,
    "\n  query GetSkirmishScoreboard(\n    $id: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $order: [SkirmishScoreboardEntrySortInput!]\n  ) {\n    skirmish(id: $id) {\n      id\n      scoreboardEntries(\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n        order: $order\n      ) {\n        nodes {\n          realm\n          kills\n          killsSolo\n          deaths\n          deathBlows\n          damage\n          damageReceived\n          healing\n          healingReceived\n          protection\n          protectionReceived\n          killDamage\n          healingSelf\n          healingOthers\n          protectionSelf\n          protectionOthers\n          resurrectionsDone\n          level\n          renownRank\n          character {\n            id\n            name\n            career\n          }\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n": types.GetSkirmishScoreboardDocument,
    "\n  query GetSkirmishTopPlayer(\n    $id: ID!\n    $order: [SkirmishScoreboardEntrySortInput!]\n  ) {\n    skirmish(id: $id) {\n      id\n      scoreboardEntries(first: 1, order: $order) {\n        nodes {\n          realm\n          damage\n          healing\n          protection\n          deathBlows\n          level\n          renownRank\n          character {\n            id\n            name\n            career\n          }\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetSkirmishTopPlayerDocument,
    "\n  query GetTopSkirmishes {\n    topSkirmishes {\n      id\n      scenario {\n        id\n        name\n      }\n      primaryZone {\n        id\n        name\n      }\n      primaryZoneArea {\n        id\n        name\n      }\n      startTime\n      endTime\n      topGuildsByPlayers {\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        count\n      }\n      numberOfKills\n      numberOfKillsOrder\n      numberOfKillsDestruction\n      numberOfPlayers\n      numberOfPlayersOrder\n      numberOfPlayersDestruction\n    }\n  }\n": types.GetTopSkirmishesDocument,
    "\n  query GetWeeklyLeaderboard($year: Int!, $week: Int!) {\n    weeklyKillLeaderboard(year: $year, week: $week) {\n      rank\n      kills\n      character {\n        id\n        name\n        career\n        level\n        renownRank\n        guildMembership {\n          guild {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetWeeklyLeaderboardDocument,
    "\n  query GetWeeklyGuildLeaderboard($year: Int!, $week: Int!) {\n    weeklyGuildKillLeaderboard(year: $year, week: $week) {\n      guild {\n        id\n        name\n        realm\n        heraldry {\n          emblem\n          pattern\n          color1\n          color2\n          shape\n        }\n      }\n      rank\n      kills\n    }\n  }\n": types.GetWeeklyGuildLeaderboardDocument,
    "\n  query GetCreature($id: ID!) {\n    creature(id: $id) {\n      id\n      name\n      creatureType\n      creatureSubType\n      realm\n      spawns {\n        id\n        position {\n          x\n          y\n          zone {\n            id\n            name\n          }\n          mapSetup {\n            nwCornerX\n            nwCornerY\n            seCornerX\n            seCornerY\n          }\n        }\n      }\n      questsStarter {\n        id\n        name\n        type {\n          isEpic\n          isGroup\n          isNone\n          isPlayerKill\n          isRvR\n          isTome\n          isTravel\n        }\n        repeatableType\n      }\n    }\n  }\n": types.GetCreatureDocument,
    "\n  query GetCreatures(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: CreatureFilterInput\n  ) {\n    creatures(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n    ) {\n      nodes {\n        id\n        name\n        creatureType\n        creatureSubType\n        realm\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetCreaturesDocument,
    "\n  query GetGuildInfo($id: ID!) {\n    guild(id: $id) {\n      name\n      description\n      briefDescription\n      level\n      realm\n      heraldry {\n        emblem\n        pattern\n        color1\n        color2\n        shape\n      }\n      leader {\n        id\n        name\n        career\n      }\n      members {\n        totalCount\n        nodes {\n          rank {\n            name\n          }\n          character {\n            id\n            name\n            career\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n": types.GetGuildInfoDocument,
    "\n  query GetGuildFeudInfo(\n    $guildId1: ID!\n    $guildInt1: UnsignedInt!\n    $guildId2: ID!\n    $guildInt2: UnsignedInt!\n  ) {\n    guild1: guild(id: $guildId1) {\n      name\n      description\n      briefDescription\n      level\n      realm\n      heraldry {\n        emblem\n        pattern\n        color1\n        color2\n        shape\n      }\n      leader {\n        id\n        name\n        career\n      }\n      members {\n        totalCount\n      }\n    }\n\n    guild2: guild(id: $guildId2) {\n      name\n      description\n      briefDescription\n      level\n      realm\n      heraldry {\n        emblem\n        pattern\n        color1\n        color2\n        shape\n      }\n      leader {\n        id\n        name\n        career\n      }\n      members {\n        totalCount\n      }\n    }\n\n    guild1kills: kills(\n      first: 0\n      where: {\n        killerGuildId: { eq: $guildInt1 }\n        victimGuildId: { eq: $guildInt2 }\n      }\n    ) {\n      totalCount\n    }\n\n    guild2kills: kills(\n      first: 0\n      where: {\n        killerGuildId: { eq: $guildInt2 }\n        victimGuildId: { eq: $guildInt1 }\n      }\n    ) {\n      totalCount\n    }\n  }\n": types.GetGuildFeudInfoDocument,
    "\n  query GetInstanceEncounterRun($id: ID!) {\n    instanceEncounterRun(id: $id) {\n      id\n      start\n      end\n      scoreboardEntries {\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        level\n        renownRank\n        itemRating\n        deaths\n        damage\n        killDamage\n        healing\n        healingSelf\n        healingOthers\n        protection\n        protectionSelf\n        protectionOthers\n        damageReceived\n        resurrectionsDone\n        healingReceived\n        protectionReceived\n      }\n      encounter {\n        id\n        name\n      }\n    }\n  }\n": types.GetInstanceEncounterRunDocument,
    "\n  query GetInstanceRun($id: ID!) {\n    instanceRun(id: $id) {\n      id\n      start\n      end\n      instance {\n        id\n        name\n      }\n      scoreboardEntries {\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        level\n        renownRank\n        archetype\n        itemRating\n        deaths\n        damage\n        killDamage\n        healing\n        healingSelf\n        healingOthers\n        protection\n        protectionSelf\n        protectionOthers\n        damageReceived\n        resurrectionsDone\n        healingReceived\n        protectionReceived\n      }\n      encounters {\n        id\n        start\n        end\n        completed\n        instanceId\n        encounterId\n        scoreboardEntries {\n          itemRating\n          archetype\n          deaths\n          damage\n          healing\n        }\n        encounter {\n          name\n        }\n      }\n    }\n  }\n": types.GetInstanceRunDocument,
    "\n  query GetInstances(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: InstanceFilterInput\n  ) {\n    instances(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n    ) {\n      nodes {\n        id\n        name\n        encounters {\n          id\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetInstancesDocument,
    "\n  query GetItemInfo($id: ID!) {\n    item(id: $id) {\n      id\n      name\n      description\n      careerRestriction\n      description\n      rarity\n      itemLevel\n      iconUrl\n      stats {\n        stat\n        value\n      }\n      type\n      levelRequirement\n      renownRankRequirement\n      slot\n      armor\n      careerRestriction\n      talismanSlots\n      speed\n      dps\n      itemSet {\n        id\n        name\n        items {\n          id\n          name\n          iconUrl\n        }\n        bonuses {\n          itemsRequired\n          bonus {\n            ... on Ability {\n              description\n              __typename\n            }\n            ... on ItemStat {\n              stat\n              value\n              percentage\n              __typename\n            }\n          }\n        }\n      }\n      buffs {\n        id\n        description\n      }\n      soldByVendors {\n        totalCount\n      }\n      usedToPurchase {\n        totalCount\n      }\n      rewardedFromQuests {\n        totalCount\n      }\n    }\n  }\n": types.GetItemInfoDocument,
    "\n  query SearchItems(\n    $query: ItemFilterInput\n    $usableByCareer: Career\n    $hasStats: [Stat!]\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    items(\n      where: $query\n      usableByCareer: $usableByCareer\n      hasStats: $hasStats\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        iconUrl\n        name\n        careerRestriction\n        description\n        type\n        slot\n        rarity\n        armor\n        dps\n        speed\n        levelRequirement\n        renownRankRequirement\n        itemLevel\n        talismanSlots\n        itemSet {\n          id\n          name\n          items {\n            id\n          }\n          bonuses {\n            itemsRequired\n            bonus {\n              ... on Ability {\n                description\n                __typename\n              }\n              ... on ItemStat {\n                stat\n                value\n                percentage\n                __typename\n              }\n            }\n          }\n        }\n        buffs {\n          id\n          description\n        }\n        stats {\n          stat\n          value\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.SearchItemsDocument,
    "\n  query GetKill($id: ID!) {\n    kill(id: $id, includeAssists: true) {\n      scenario {\n        id\n        name\n      }\n      instanceId\n      skirmish {\n        id\n      }\n      time\n      position {\n        zoneId\n        zone {\n          name\n        }\n        x\n        y\n        mapSetup {\n          nwCornerX\n          nwCornerY\n          seCornerX\n          seCornerY\n        }\n      }\n      victim {\n        level\n        renownRank\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n      }\n      attackers {\n        damagePercent\n        level\n        renownRank\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n      }\n      damage {\n        attackerType\n        damageType\n        attacker {\n          id\n        }\n        ability {\n          id\n          name\n          iconUrl\n        }\n        damageAmount\n      }\n      deathblow {\n        id\n      }\n    }\n  }\n": types.GetKillDocument,
    "\n  query GetKills(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $from: Int\n    $to: Int\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { time: { gte: $from, lte: $to } }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetKillsDocument,
    "\n  query GetPlayerFeudInfo(\n    $playerId1: ID!\n    $playerIntId1: UnsignedInt!\n    $playerId2: ID!\n    $playerIntId2: UnsignedInt!\n  ) {\n    player1: character(id: $playerId1) {\n      name\n      career\n      level\n      renownRank\n      guildMembership {\n        guild {\n          id\n          name\n        }\n      }\n    }\n\n    player2: character(id: $playerId2) {\n      name\n      career\n      level\n      renownRank\n      guildMembership {\n        guild {\n          id\n          name\n        }\n      }\n    }\n\n    player1kills: kills(\n      first: 0\n      where: {\n        killerCharacterId: { eq: $playerIntId1 }\n        victimCharacterId: { eq: $playerIntId2 }\n      }\n    ) {\n      totalCount\n    }\n\n    player2kills: kills(\n      first: 0\n      where: {\n        killerCharacterId: { eq: $playerIntId2 }\n        victimCharacterId: { eq: $playerIntId1 }\n      }\n    ) {\n      totalCount\n    }\n  }\n": types.GetPlayerFeudInfoDocument,
    "\n  query GetQuestInfo($id: ID!) {\n    quest(id: $id) {\n      id\n      name\n      type {\n        isGroup\n        isTravel\n        isTome\n        isRvR\n        isPlayerKill\n        isEpic\n      }\n      xp\n      gold\n      choiceCount\n      rewardsChoice {\n        count\n        item {\n          id\n          iconUrl\n          name\n        }\n      }\n      rewardsGiven {\n        count\n        item {\n          id\n          iconUrl\n          name\n        }\n      }\n      description\n      objectives {\n        description\n        count\n      }\n      journalEntry\n      raceRestriction\n      careerRestriction\n      minLevel\n      maxLevel\n      minRenown\n      maxRenown\n      starterCreatures {\n        id\n        name\n        realm\n      }\n    }\n  }\n": types.GetQuestInfoDocument,
    "\n  query GetQuests(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: QuestFilterInput\n  ) {\n    quests(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n    ) {\n      nodes {\n        id\n        name\n        type {\n          isGroup\n          isTravel\n          isTome\n          isRvR\n          isPlayerKill\n          isEpic\n        }\n        repeatableType\n        xp\n        gold\n        choiceCount\n        rewardsChoice {\n          count\n          item {\n            id\n            iconUrl\n            name\n          }\n        }\n        rewardsGiven {\n          count\n          item {\n            id\n            iconUrl\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.GetQuestsDocument,
    "\n  query GetRankedLeaderboardSeasons {\n    rankedSeasons {\n      id\n      name\n      start\n      end\n      mainSeason\n    }\n  }\n": types.GetRankedLeaderboardSeasonsDocument,
    "\n  query GetScenarioInfo($id: ID!) {\n    scenario(id: $id) {\n      id\n      scenario {\n        id\n        name\n        zone {\n          id\n        }\n      }\n      startTime\n      endTime\n      winner\n      points\n      queueType\n      scoreboardEntries {\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        team\n        level\n        renownRank\n        quitter\n        protection\n        kills\n        deathBlows\n        deaths\n        damage\n        healing\n        objectiveScore\n        killsSolo\n        killDamage\n        healingSelf\n        healingOthers\n        protectionSelf\n        protectionOthers\n        damageReceived\n        resurrectionsDone\n        healingReceived\n        protectionReceived\n      }\n    }\n  }\n": types.GetScenarioInfoDocument,
    "\n  query Search(\n    $query: String!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    search(\n      query: $query\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        __typename\n        id\n        name\n        ... on Character {\n          level\n          career\n          renownRank\n          guildMembership {\n            guild {\n              id\n              name\n            }\n          }\n        }\n        ... on Guild {\n          level\n          realm\n          leader {\n            id\n            name\n          }\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n          members {\n            totalCount\n          }\n        }\n        ... on Item {\n          iconUrl\n          description\n          type\n          slot\n          rarity\n          itemLevel\n          itemSet {\n            id\n            name\n          }\n        }\n        ... on Quest {\n          questType: type {\n            isGroup\n            isTravel\n            isTome\n            isRvR\n            isPlayerKill\n            isEpic\n          }\n          repeatableType\n          minLevel\n          xp\n          gold\n          journalEntry\n          questDescription: description\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.SearchDocument,
    "\n  query SearchGuilds(\n    $query: String!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    guilds(\n      where: { name: { contains: $query } }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        name\n        level\n        leader {\n          id\n          level\n          name\n          renownRank\n        }\n        members {\n          totalCount\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n": types.SearchGuildsDocument,
    "\n  query GetSkirmishInfo($id: ID!) {\n    skirmish(id: $id) {\n      id\n      instance {\n        id\n        scenario {\n          id\n          name\n        }\n      }\n      primaryZone {\n        id\n        name\n      }\n      startTime\n      endTime\n      heatmap {\n        x\n        y\n        count\n      }\n      numberOfKills\n      numberOfKillsOrder\n      numberOfKillsDestruction\n      numberOfPlayers\n      numberOfPlayersOrder\n      numberOfPlayersDestruction\n      topGuildsByPlayers {\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        count\n      }\n      topGuildsByKills {\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        count\n      }\n    }\n  }\n": types.GetSkirmishInfoDocument,
    "\n  query GetZoneHeatmap($id: ID, $from: Long) {\n    killsHeatmap(zoneId: $id, from: $from) {\n      x\n      y\n      count\n    }\n  }\n": types.GetZoneHeatmapDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCharacterArmory($id: ID!) {\n    character(id: $id) {\n      items {\n        equipSlot\n        talismans {\n          name\n          rarity\n          iconUrl\n          stats {\n            stat\n            value\n          }\n          buffs {\n            id\n            description\n          }\n        }\n        item {\n          id\n          name\n          careerRestriction\n          description\n          rarity\n          itemLevel\n          iconUrl\n          stats {\n            stat\n            value\n          }\n          type\n          levelRequirement\n          renownRankRequirement\n          slot\n          armor\n          careerRestriction\n          talismanSlots\n          speed\n          dps\n          itemSet {\n            id\n            name\n            items {\n              id\n            }\n            bonuses {\n              itemsRequired\n              bonus {\n                ... on Ability {\n                  description\n                  __typename\n                }\n                ... on ItemStat {\n                  stat\n                  value\n                  percentage\n                  __typename\n                }\n              }\n            }\n          }\n          buffs {\n            id\n            description\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCharacterArmory($id: ID!) {\n    character(id: $id) {\n      items {\n        equipSlot\n        talismans {\n          name\n          rarity\n          iconUrl\n          stats {\n            stat\n            value\n          }\n          buffs {\n            id\n            description\n          }\n        }\n        item {\n          id\n          name\n          careerRestriction\n          description\n          rarity\n          itemLevel\n          iconUrl\n          stats {\n            stat\n            value\n          }\n          type\n          levelRequirement\n          renownRankRequirement\n          slot\n          armor\n          careerRestriction\n          talismanSlots\n          speed\n          dps\n          itemSet {\n            id\n            name\n            items {\n              id\n            }\n            bonuses {\n              itemsRequired\n              bonus {\n                ... on Ability {\n                  description\n                  __typename\n                }\n                ... on ItemStat {\n                  stat\n                  value\n                  percentage\n                  __typename\n                }\n              }\n            }\n          }\n          buffs {\n            id\n            description\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCharacterInfo($id: ID!) {\n    character(id: $id) {\n      name\n      career\n      level\n      renownRank\n      guildMembership {\n        guild {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCharacterInfo($id: ID!) {\n    character(id: $id) {\n      name\n      career\n      level\n      renownRank\n      guildMembership {\n        guild {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCharacterLatestSkirmishes(\n    $characterId: ID\n    $where: SkirmishFilterInput\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    skirmishes(\n      characterId: $characterId\n      where: $where\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        primaryZone {\n          id\n          name\n        }\n        primaryZoneArea {\n          id\n          name\n        }\n        startTime\n        endTime\n        topGuildsByPlayers {\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          count\n        }\n        numberOfKills\n        numberOfKillsOrder\n        numberOfKillsDestruction\n        numberOfPlayers\n        numberOfPlayersOrder\n        numberOfPlayersDestruction\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCharacterLatestSkirmishes(\n    $characterId: ID\n    $where: SkirmishFilterInput\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    skirmishes(\n      characterId: $characterId\n      where: $where\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        primaryZone {\n          id\n          name\n        }\n        primaryZoneArea {\n          id\n          name\n        }\n        startTime\n        endTime\n        topGuildsByPlayers {\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          count\n        }\n        numberOfKills\n        numberOfKillsOrder\n        numberOfKillsDestruction\n        numberOfPlayers\n        numberOfPlayersOrder\n        numberOfPlayersDestruction\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLatestCharacterDeaths(\n    $id: UnsignedInt!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $time: IntOperationFilterInput\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { victimCharacterId: { eq: $id }, time: $time }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLatestCharacterDeaths(\n    $id: UnsignedInt!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $time: IntOperationFilterInput\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { victimCharacterId: { eq: $id }, time: $time }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLatestCharacterKills(\n    $id: UnsignedInt!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $time: IntOperationFilterInput\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { killerCharacterId: { eq: $id }, time: $time }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      totalCount\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        attackers {\n          damagePercent\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLatestCharacterKills(\n    $id: UnsignedInt!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $time: IntOperationFilterInput\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { killerCharacterId: { eq: $id }, time: $time }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      totalCount\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        attackers {\n          damagePercent\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetGuildFeud(\n    $guild1Id: ID!\n    $guild2Id: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    kills(\n      guildFeudFilter: { guild1Id: $guild1Id, guild2Id: $guild2Id }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetGuildFeud(\n    $guild1Id: ID!\n    $guild2Id: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    kills(\n      guildFeudFilter: { guild1Id: $guild1Id, guild2Id: $guild2Id }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetGuildLatestSkirmishes(\n    $guildId: ID\n    $where: SkirmishFilterInput\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    skirmishes(\n      guildId: $guildId\n      where: $where\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        primaryZone {\n          id\n          name\n        }\n        primaryZoneArea {\n          id\n          name\n        }\n        startTime\n        endTime\n        topGuildsByPlayers {\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          count\n        }\n        numberOfKills\n        numberOfKillsOrder\n        numberOfKillsDestruction\n        numberOfPlayers\n        numberOfPlayersOrder\n        numberOfPlayersDestruction\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetGuildLatestSkirmishes(\n    $guildId: ID\n    $where: SkirmishFilterInput\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    skirmishes(\n      guildId: $guildId\n      where: $where\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        primaryZone {\n          id\n          name\n        }\n        primaryZoneArea {\n          id\n          name\n        }\n        startTime\n        endTime\n        topGuildsByPlayers {\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          count\n        }\n        numberOfKills\n        numberOfKillsOrder\n        numberOfKillsDestruction\n        numberOfPlayers\n        numberOfPlayersOrder\n        numberOfPlayersDestruction\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetGuildMembers(\n    $id: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    guild(id: $id) {\n      members(first: $first, last: $last, before: $before, after: $after) {\n        nodes {\n          rank {\n            name\n          }\n          character {\n            id\n            name\n            career\n            level\n            renownRank\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetGuildMembers(\n    $id: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    guild(id: $id) {\n      members(first: $first, last: $last, before: $before, after: $after) {\n        nodes {\n          rank {\n            name\n          }\n          character {\n            id\n            name\n            career\n            level\n            renownRank\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLatestGuildDeaths(\n    $id: UnsignedInt!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $time: IntOperationFilterInput\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { victimGuildId: { eq: $id }, time: $time }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLatestGuildDeaths(\n    $id: UnsignedInt!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $time: IntOperationFilterInput\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { victimGuildId: { eq: $id }, time: $time }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLatestGuildKills(\n    $id: UnsignedInt!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $time: IntOperationFilterInput\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { killerGuildId: { eq: $id }, time: $time }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      totalCount\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLatestGuildKills(\n    $id: UnsignedInt!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $time: IntOperationFilterInput\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { killerGuildId: { eq: $id }, time: $time }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      totalCount\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetInstanceRuns(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: InstanceRunFilterInput\n  ) {\n    instanceRuns(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n      order: { start: DESC }\n    ) {\n      nodes {\n        id\n        instanceId\n        start\n        end\n        completed\n        instance {\n          id\n          name\n        }\n        scoreboardEntries {\n          itemRating\n          deaths\n          archetype\n          damage\n          healing\n        }\n        encounters {\n          encounterId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      totalCount\n      averageDuration\n      averageDeaths\n    }\n  }\n"): (typeof documents)["\n  query GetInstanceRuns(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: InstanceRunFilterInput\n  ) {\n    instanceRuns(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n      order: { start: DESC }\n    ) {\n      nodes {\n        id\n        instanceId\n        start\n        end\n        completed\n        instance {\n          id\n          name\n        }\n        scoreboardEntries {\n          itemRating\n          deaths\n          archetype\n          damage\n          healing\n        }\n        encounters {\n          encounterId\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n      totalCount\n      averageDuration\n      averageDeaths\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetItemPopupInfo($id: ID!) {\n    item(id: $id) {\n      id\n      name\n      description\n      careerRestriction\n      description\n      rarity\n      itemLevel\n      iconUrl\n      stats {\n        stat\n        value\n      }\n      type\n      levelRequirement\n      renownRankRequirement\n      slot\n      armor\n      careerRestriction\n      talismanSlots\n      speed\n      dps\n      itemSet {\n        id\n        name\n        items {\n          id\n          name\n          iconUrl\n        }\n        bonuses {\n          itemsRequired\n          bonus {\n            ... on Ability {\n              description\n              __typename\n            }\n            ... on ItemStat {\n              stat\n              value\n              percentage\n              __typename\n            }\n          }\n        }\n      }\n      buffs {\n        id\n        description\n      }\n      soldByVendors {\n        totalCount\n      }\n      usedToPurchase {\n        totalCount\n      }\n      rewardedFromQuests {\n        totalCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetItemPopupInfo($id: ID!) {\n    item(id: $id) {\n      id\n      name\n      description\n      careerRestriction\n      description\n      rarity\n      itemLevel\n      iconUrl\n      stats {\n        stat\n        value\n      }\n      type\n      levelRequirement\n      renownRankRequirement\n      slot\n      armor\n      careerRestriction\n      talismanSlots\n      speed\n      dps\n      itemSet {\n        id\n        name\n        items {\n          id\n          name\n          iconUrl\n        }\n        bonuses {\n          itemsRequired\n          bonus {\n            ... on Ability {\n              description\n              __typename\n            }\n            ... on ItemStat {\n              stat\n              value\n              percentage\n              __typename\n            }\n          }\n        }\n      }\n      buffs {\n        id\n        description\n      }\n      soldByVendors {\n        totalCount\n      }\n      usedToPurchase {\n        totalCount\n      }\n      rewardedFromQuests {\n        totalCount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetItemRewardedFromQuests(\n    $itemId: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    item(id: $itemId) {\n      id\n      rewardedFromQuests(\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n      ) {\n        nodes {\n          id\n          name\n          type {\n            isGroup\n            isTravel\n            isTome\n            isRvR\n            isPlayerKill\n            isEpic\n          }\n          repeatableType\n          rewardsChoice {\n            item {\n              id\n              name\n              iconUrl\n            }\n            count\n          }\n          rewardsGiven {\n            item {\n              id\n              name\n              iconUrl\n            }\n            count\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetItemRewardedFromQuests(\n    $itemId: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    item(id: $itemId) {\n      id\n      rewardedFromQuests(\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n      ) {\n        nodes {\n          id\n          name\n          type {\n            isGroup\n            isTravel\n            isTome\n            isRvR\n            isPlayerKill\n            isEpic\n          }\n          repeatableType\n          rewardsChoice {\n            item {\n              id\n              name\n              iconUrl\n            }\n            count\n          }\n          rewardsGiven {\n            item {\n              id\n              name\n              iconUrl\n            }\n            count\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetItemUsedToPurchase(\n    $itemId: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $usableByCareer: Career\n  ) {\n    item(id: $itemId) {\n      id\n      usedToPurchase(\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n        usableByCareer: $usableByCareer\n      ) {\n        nodes {\n          count\n          item {\n            id\n            name\n            iconUrl\n          }\n          price\n          requiredItems {\n            count\n            item {\n              id\n              name\n              iconUrl\n            }\n          }\n          creatures {\n            id\n            name\n            realm\n            spawns {\n              zone {\n                name\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetItemUsedToPurchase(\n    $itemId: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $usableByCareer: Career\n  ) {\n    item(id: $itemId) {\n      id\n      usedToPurchase(\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n        usableByCareer: $usableByCareer\n      ) {\n        nodes {\n          count\n          item {\n            id\n            name\n            iconUrl\n          }\n          price\n          requiredItems {\n            count\n            item {\n              id\n              name\n              iconUrl\n            }\n          }\n          creatures {\n            id\n            name\n            realm\n            spawns {\n              zone {\n                name\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetItemSoldByVendors(\n    $itemId: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    item(id: $itemId) {\n      id\n      soldByVendors(\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n      ) {\n        nodes {\n          price\n          requiredItems {\n            count\n            item {\n              id\n              name\n              iconUrl\n            }\n          }\n          creatures {\n            id\n            name\n            realm\n            spawns {\n              zone {\n                name\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetItemSoldByVendors(\n    $itemId: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    item(id: $itemId) {\n      id\n      soldByVendors(\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n      ) {\n        nodes {\n          price\n          requiredItems {\n            count\n            item {\n              id\n              name\n              iconUrl\n            }\n          }\n          creatures {\n            id\n            name\n            realm\n            spawns {\n              zone {\n                name\n              }\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLatestKills(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    kills(first: $first, last: $last, before: $before, after: $after) {\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLatestKills(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    kills(first: $first, last: $last, before: $before, after: $after) {\n      nodes {\n        id\n        time\n        position {\n          zone {\n            id\n            name\n          }\n        }\n        scenario {\n          id\n          name\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetLatestSkirmishes(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: SkirmishFilterInput\n  ) {\n    skirmishes(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n    ) {\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        primaryZone {\n          id\n          name\n        }\n        primaryZoneArea {\n          id\n          name\n        }\n        startTime\n        endTime\n        topGuildsByPlayers {\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          count\n        }\n        numberOfKills\n        numberOfKillsOrder\n        numberOfKillsDestruction\n        numberOfPlayers\n        numberOfPlayersOrder\n        numberOfPlayersDestruction\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetLatestSkirmishes(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: SkirmishFilterInput\n  ) {\n    skirmishes(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n    ) {\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        primaryZone {\n          id\n          name\n        }\n        primaryZoneArea {\n          id\n          name\n        }\n        startTime\n        endTime\n        topGuildsByPlayers {\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          count\n        }\n        numberOfKills\n        numberOfKillsOrder\n        numberOfKillsDestruction\n        numberOfPlayers\n        numberOfPlayersOrder\n        numberOfPlayersDestruction\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMonthlyGuildLeaderboard($year: Int!, $month: Int!) {\n    monthlyGuildKillLeaderboard(year: $year, month: $month) {\n      guild {\n        id\n        name\n        realm\n        heraldry {\n          emblem\n          pattern\n          color1\n          color2\n          shape\n        }\n      }\n      rank\n      kills\n    }\n  }\n"): (typeof documents)["\n  query GetMonthlyGuildLeaderboard($year: Int!, $month: Int!) {\n    monthlyGuildKillLeaderboard(year: $year, month: $month) {\n      guild {\n        id\n        name\n        realm\n        heraldry {\n          emblem\n          pattern\n          color1\n          color2\n          shape\n        }\n      }\n      rank\n      kills\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMonthlyLeaderboard($year: Int!, $month: Int!) {\n    monthlyKillLeaderboard(year: $year, month: $month) {\n      rank\n      kills\n      character {\n        id\n        name\n        career\n        level\n        renownRank\n        guildMembership {\n          guild {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMonthlyLeaderboard($year: Int!, $month: Int!) {\n    monthlyKillLeaderboard(year: $year, month: $month) {\n      rank\n      kills\n      character {\n        id\n        name\n        career\n        level\n        renownRank\n        guildMembership {\n          guild {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPlayerFeud(\n    $player1Id: ID!\n    $player2Id: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    kills(\n      playerFeudFilter: { player1Id: $player1Id, player2Id: $player2Id }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPlayerFeud(\n    $player1Id: ID!\n    $player2Id: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    kills(\n      playerFeudFilter: { player1Id: $player1Id, player2Id: $player2Id }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetRankedLeaderboard(\n    $season: ID\n    $type: RankedLeaderboardRatingType!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    rankedSeason(id: $season) {\n      id\n      mainSeason\n      name\n      start\n      end\n      leaderboard(\n        type: $type\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n      ) {\n        nodes {\n          character {\n            id\n            name\n            career\n          }\n          guild {\n            id\n            name\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          careerRank\n          rank\n          rating\n          wins\n          losses\n          draws\n          renownRank\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetRankedLeaderboard(\n    $season: ID\n    $type: RankedLeaderboardRatingType!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    rankedSeason(id: $season) {\n      id\n      mainSeason\n      name\n      start\n      end\n      leaderboard(\n        type: $type\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n      ) {\n        nodes {\n          character {\n            id\n            name\n            career\n          }\n          guild {\n            id\n            name\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          careerRank\n          rank\n          rating\n          wins\n          losses\n          draws\n          renownRank\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetScenarioCount(\n    $characterId: ID\n    $guildId: ID\n    $queueType: ScenarioQueueType\n    $premadeOnly: Boolean\n    $wins: Boolean\n  ) {\n    scenarios(\n      characterId: $characterId\n      guildId: $guildId\n      queueType: $queueType\n      premadeOnly: $premadeOnly\n      wins: $wins\n    ) {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetScenarioCount(\n    $characterId: ID\n    $guildId: ID\n    $queueType: ScenarioQueueType\n    $premadeOnly: Boolean\n    $wins: Boolean\n  ) {\n    scenarios(\n      characterId: $characterId\n      guildId: $guildId\n      queueType: $queueType\n      premadeOnly: $premadeOnly\n      wins: $wins\n    ) {\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetScenarioHeatmap($id: ID) {\n    killsHeatmap(instanceId: $id) {\n      x\n      y\n      count\n    }\n  }\n"): (typeof documents)["\n  query GetScenarioHeatmap($id: ID) {\n    killsHeatmap(instanceId: $id) {\n      x\n      y\n      count\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetScenarioKills(\n    $id: UUID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $from: Int\n    $to: Int\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { time: { gte: $from, lte: $to }, instanceId: { eq: $id } }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      totalCount\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetScenarioKills(\n    $id: UUID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $from: Int\n    $to: Int\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { time: { gte: $from, lte: $to }, instanceId: { eq: $id } }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      totalCount\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetScenarioList(\n    $characterId: ID\n    $guildId: ID\n    $queueType: ScenarioQueueType\n    $premadeOnly: Boolean\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    scenarios(\n      characterId: $characterId\n      guildId: $guildId\n      queueType: $queueType\n      premadeOnly: $premadeOnly\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      totalCount\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        startTime\n        endTime\n        winner\n        points\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetScenarioList(\n    $characterId: ID\n    $guildId: ID\n    $queueType: ScenarioQueueType\n    $premadeOnly: Boolean\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    scenarios(\n      characterId: $characterId\n      guildId: $guildId\n      queueType: $queueType\n      premadeOnly: $premadeOnly\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      totalCount\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        startTime\n        endTime\n        winner\n        points\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetScenarioSkirmishes(\n    $instanceId: UUID\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    skirmishes(\n      where: { instanceId: { eq: $instanceId } }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        primaryZone {\n          id\n          name\n        }\n        primaryZoneArea {\n          id\n          name\n        }\n        startTime\n        endTime\n        topGuildsByPlayers {\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          count\n        }\n        numberOfKills\n        numberOfKillsOrder\n        numberOfKillsDestruction\n        numberOfPlayers\n        numberOfPlayersOrder\n        numberOfPlayersDestruction\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetScenarioSkirmishes(\n    $instanceId: UUID\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    skirmishes(\n      where: { instanceId: { eq: $instanceId } }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        scenario {\n          id\n          name\n        }\n        primaryZone {\n          id\n          name\n        }\n        primaryZoneArea {\n          id\n          name\n        }\n        startTime\n        endTime\n        topGuildsByPlayers {\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n          count\n        }\n        numberOfKills\n        numberOfKillsOrder\n        numberOfKillsDestruction\n        numberOfPlayers\n        numberOfPlayersOrder\n        numberOfPlayersDestruction\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSkirmishDamage($id: ID!) {\n    skirmish(id: $id) {\n      id\n      killDamage {\n        attackerType\n        damageType\n        ability {\n          id\n          name\n          iconUrl\n        }\n        damageAmount\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSkirmishDamage($id: ID!) {\n    skirmish(id: $id) {\n      id\n      killDamage {\n        attackerType\n        damageType\n        ability {\n          id\n          name\n          iconUrl\n        }\n        damageAmount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSkirmishDamageByCharacter($id: ID!, $characterId: ID!) {\n    character(id: $characterId) {\n      name\n      renownRank\n      level\n      career\n      guildMembership {\n        guild {\n          id\n          name\n        }\n      }\n    }\n    skirmish(id: $id) {\n      id\n      killDamageByCharacter(id: $characterId) {\n        attackerType\n        damageType\n        ability {\n          id\n          name\n          iconUrl\n        }\n        damageAmount\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSkirmishDamageByCharacter($id: ID!, $characterId: ID!) {\n    character(id: $characterId) {\n      name\n      renownRank\n      level\n      career\n      guildMembership {\n        guild {\n          id\n          name\n        }\n      }\n    }\n    skirmish(id: $id) {\n      id\n      killDamageByCharacter(id: $characterId) {\n        attackerType\n        damageType\n        ability {\n          id\n          name\n          iconUrl\n        }\n        damageAmount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSkirmishKills(\n    $id: UUID!\n    $startTime: Int\n    $endTime: Int\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $soloOnly: Boolean\n  ) {\n    kills(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n      where: {\n        and: [{ time: { gte: $startTime } }, { time: { lte: $endTime } }]\n        skirmishId: { eq: $id }\n      }\n    ) {\n      totalCount\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSkirmishKills(\n    $id: UUID!\n    $startTime: Int\n    $endTime: Int\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $soloOnly: Boolean\n  ) {\n    kills(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n      where: {\n        and: [{ time: { gte: $startTime } }, { time: { lte: $endTime } }]\n        skirmishId: { eq: $id }\n      }\n    ) {\n      totalCount\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSkirmishScoreboard(\n    $id: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $order: [SkirmishScoreboardEntrySortInput!]\n  ) {\n    skirmish(id: $id) {\n      id\n      scoreboardEntries(\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n        order: $order\n      ) {\n        nodes {\n          realm\n          kills\n          killsSolo\n          deaths\n          deathBlows\n          damage\n          damageReceived\n          healing\n          healingReceived\n          protection\n          protectionReceived\n          killDamage\n          healingSelf\n          healingOthers\n          protectionSelf\n          protectionOthers\n          resurrectionsDone\n          level\n          renownRank\n          character {\n            id\n            name\n            career\n          }\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSkirmishScoreboard(\n    $id: ID!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $order: [SkirmishScoreboardEntrySortInput!]\n  ) {\n    skirmish(id: $id) {\n      id\n      scoreboardEntries(\n        first: $first\n        last: $last\n        before: $before\n        after: $after\n        order: $order\n      ) {\n        nodes {\n          realm\n          kills\n          killsSolo\n          deaths\n          deathBlows\n          damage\n          damageReceived\n          healing\n          healingReceived\n          protection\n          protectionReceived\n          killDamage\n          healingSelf\n          healingOthers\n          protectionSelf\n          protectionOthers\n          resurrectionsDone\n          level\n          renownRank\n          character {\n            id\n            name\n            career\n          }\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSkirmishTopPlayer(\n    $id: ID!\n    $order: [SkirmishScoreboardEntrySortInput!]\n  ) {\n    skirmish(id: $id) {\n      id\n      scoreboardEntries(first: 1, order: $order) {\n        nodes {\n          realm\n          damage\n          healing\n          protection\n          deathBlows\n          level\n          renownRank\n          character {\n            id\n            name\n            career\n          }\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSkirmishTopPlayer(\n    $id: ID!\n    $order: [SkirmishScoreboardEntrySortInput!]\n  ) {\n    skirmish(id: $id) {\n      id\n      scoreboardEntries(first: 1, order: $order) {\n        nodes {\n          realm\n          damage\n          healing\n          protection\n          deathBlows\n          level\n          renownRank\n          character {\n            id\n            name\n            career\n          }\n          guild {\n            id\n            name\n            realm\n            heraldry {\n              emblem\n              pattern\n              color1\n              color2\n              shape\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetTopSkirmishes {\n    topSkirmishes {\n      id\n      scenario {\n        id\n        name\n      }\n      primaryZone {\n        id\n        name\n      }\n      primaryZoneArea {\n        id\n        name\n      }\n      startTime\n      endTime\n      topGuildsByPlayers {\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        count\n      }\n      numberOfKills\n      numberOfKillsOrder\n      numberOfKillsDestruction\n      numberOfPlayers\n      numberOfPlayersOrder\n      numberOfPlayersDestruction\n    }\n  }\n"): (typeof documents)["\n  query GetTopSkirmishes {\n    topSkirmishes {\n      id\n      scenario {\n        id\n        name\n      }\n      primaryZone {\n        id\n        name\n      }\n      primaryZoneArea {\n        id\n        name\n      }\n      startTime\n      endTime\n      topGuildsByPlayers {\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        count\n      }\n      numberOfKills\n      numberOfKillsOrder\n      numberOfKillsDestruction\n      numberOfPlayers\n      numberOfPlayersOrder\n      numberOfPlayersDestruction\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetWeeklyLeaderboard($year: Int!, $week: Int!) {\n    weeklyKillLeaderboard(year: $year, week: $week) {\n      rank\n      kills\n      character {\n        id\n        name\n        career\n        level\n        renownRank\n        guildMembership {\n          guild {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetWeeklyLeaderboard($year: Int!, $week: Int!) {\n    weeklyKillLeaderboard(year: $year, week: $week) {\n      rank\n      kills\n      character {\n        id\n        name\n        career\n        level\n        renownRank\n        guildMembership {\n          guild {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetWeeklyGuildLeaderboard($year: Int!, $week: Int!) {\n    weeklyGuildKillLeaderboard(year: $year, week: $week) {\n      guild {\n        id\n        name\n        realm\n        heraldry {\n          emblem\n          pattern\n          color1\n          color2\n          shape\n        }\n      }\n      rank\n      kills\n    }\n  }\n"): (typeof documents)["\n  query GetWeeklyGuildLeaderboard($year: Int!, $week: Int!) {\n    weeklyGuildKillLeaderboard(year: $year, week: $week) {\n      guild {\n        id\n        name\n        realm\n        heraldry {\n          emblem\n          pattern\n          color1\n          color2\n          shape\n        }\n      }\n      rank\n      kills\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCreature($id: ID!) {\n    creature(id: $id) {\n      id\n      name\n      creatureType\n      creatureSubType\n      realm\n      spawns {\n        id\n        position {\n          x\n          y\n          zone {\n            id\n            name\n          }\n          mapSetup {\n            nwCornerX\n            nwCornerY\n            seCornerX\n            seCornerY\n          }\n        }\n      }\n      questsStarter {\n        id\n        name\n        type {\n          isEpic\n          isGroup\n          isNone\n          isPlayerKill\n          isRvR\n          isTome\n          isTravel\n        }\n        repeatableType\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCreature($id: ID!) {\n    creature(id: $id) {\n      id\n      name\n      creatureType\n      creatureSubType\n      realm\n      spawns {\n        id\n        position {\n          x\n          y\n          zone {\n            id\n            name\n          }\n          mapSetup {\n            nwCornerX\n            nwCornerY\n            seCornerX\n            seCornerY\n          }\n        }\n      }\n      questsStarter {\n        id\n        name\n        type {\n          isEpic\n          isGroup\n          isNone\n          isPlayerKill\n          isRvR\n          isTome\n          isTravel\n        }\n        repeatableType\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCreatures(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: CreatureFilterInput\n  ) {\n    creatures(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n    ) {\n      nodes {\n        id\n        name\n        creatureType\n        creatureSubType\n        realm\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCreatures(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: CreatureFilterInput\n  ) {\n    creatures(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n    ) {\n      nodes {\n        id\n        name\n        creatureType\n        creatureSubType\n        realm\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetGuildInfo($id: ID!) {\n    guild(id: $id) {\n      name\n      description\n      briefDescription\n      level\n      realm\n      heraldry {\n        emblem\n        pattern\n        color1\n        color2\n        shape\n      }\n      leader {\n        id\n        name\n        career\n      }\n      members {\n        totalCount\n        nodes {\n          rank {\n            name\n          }\n          character {\n            id\n            name\n            career\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetGuildInfo($id: ID!) {\n    guild(id: $id) {\n      name\n      description\n      briefDescription\n      level\n      realm\n      heraldry {\n        emblem\n        pattern\n        color1\n        color2\n        shape\n      }\n      leader {\n        id\n        name\n        career\n      }\n      members {\n        totalCount\n        nodes {\n          rank {\n            name\n          }\n          character {\n            id\n            name\n            career\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n          hasPreviousPage\n          startCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetGuildFeudInfo(\n    $guildId1: ID!\n    $guildInt1: UnsignedInt!\n    $guildId2: ID!\n    $guildInt2: UnsignedInt!\n  ) {\n    guild1: guild(id: $guildId1) {\n      name\n      description\n      briefDescription\n      level\n      realm\n      heraldry {\n        emblem\n        pattern\n        color1\n        color2\n        shape\n      }\n      leader {\n        id\n        name\n        career\n      }\n      members {\n        totalCount\n      }\n    }\n\n    guild2: guild(id: $guildId2) {\n      name\n      description\n      briefDescription\n      level\n      realm\n      heraldry {\n        emblem\n        pattern\n        color1\n        color2\n        shape\n      }\n      leader {\n        id\n        name\n        career\n      }\n      members {\n        totalCount\n      }\n    }\n\n    guild1kills: kills(\n      first: 0\n      where: {\n        killerGuildId: { eq: $guildInt1 }\n        victimGuildId: { eq: $guildInt2 }\n      }\n    ) {\n      totalCount\n    }\n\n    guild2kills: kills(\n      first: 0\n      where: {\n        killerGuildId: { eq: $guildInt2 }\n        victimGuildId: { eq: $guildInt1 }\n      }\n    ) {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetGuildFeudInfo(\n    $guildId1: ID!\n    $guildInt1: UnsignedInt!\n    $guildId2: ID!\n    $guildInt2: UnsignedInt!\n  ) {\n    guild1: guild(id: $guildId1) {\n      name\n      description\n      briefDescription\n      level\n      realm\n      heraldry {\n        emblem\n        pattern\n        color1\n        color2\n        shape\n      }\n      leader {\n        id\n        name\n        career\n      }\n      members {\n        totalCount\n      }\n    }\n\n    guild2: guild(id: $guildId2) {\n      name\n      description\n      briefDescription\n      level\n      realm\n      heraldry {\n        emblem\n        pattern\n        color1\n        color2\n        shape\n      }\n      leader {\n        id\n        name\n        career\n      }\n      members {\n        totalCount\n      }\n    }\n\n    guild1kills: kills(\n      first: 0\n      where: {\n        killerGuildId: { eq: $guildInt1 }\n        victimGuildId: { eq: $guildInt2 }\n      }\n    ) {\n      totalCount\n    }\n\n    guild2kills: kills(\n      first: 0\n      where: {\n        killerGuildId: { eq: $guildInt2 }\n        victimGuildId: { eq: $guildInt1 }\n      }\n    ) {\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetInstanceEncounterRun($id: ID!) {\n    instanceEncounterRun(id: $id) {\n      id\n      start\n      end\n      scoreboardEntries {\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        level\n        renownRank\n        itemRating\n        deaths\n        damage\n        killDamage\n        healing\n        healingSelf\n        healingOthers\n        protection\n        protectionSelf\n        protectionOthers\n        damageReceived\n        resurrectionsDone\n        healingReceived\n        protectionReceived\n      }\n      encounter {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetInstanceEncounterRun($id: ID!) {\n    instanceEncounterRun(id: $id) {\n      id\n      start\n      end\n      scoreboardEntries {\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        level\n        renownRank\n        itemRating\n        deaths\n        damage\n        killDamage\n        healing\n        healingSelf\n        healingOthers\n        protection\n        protectionSelf\n        protectionOthers\n        damageReceived\n        resurrectionsDone\n        healingReceived\n        protectionReceived\n      }\n      encounter {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetInstanceRun($id: ID!) {\n    instanceRun(id: $id) {\n      id\n      start\n      end\n      instance {\n        id\n        name\n      }\n      scoreboardEntries {\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        level\n        renownRank\n        archetype\n        itemRating\n        deaths\n        damage\n        killDamage\n        healing\n        healingSelf\n        healingOthers\n        protection\n        protectionSelf\n        protectionOthers\n        damageReceived\n        resurrectionsDone\n        healingReceived\n        protectionReceived\n      }\n      encounters {\n        id\n        start\n        end\n        completed\n        instanceId\n        encounterId\n        scoreboardEntries {\n          itemRating\n          archetype\n          deaths\n          damage\n          healing\n        }\n        encounter {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetInstanceRun($id: ID!) {\n    instanceRun(id: $id) {\n      id\n      start\n      end\n      instance {\n        id\n        name\n      }\n      scoreboardEntries {\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        level\n        renownRank\n        archetype\n        itemRating\n        deaths\n        damage\n        killDamage\n        healing\n        healingSelf\n        healingOthers\n        protection\n        protectionSelf\n        protectionOthers\n        damageReceived\n        resurrectionsDone\n        healingReceived\n        protectionReceived\n      }\n      encounters {\n        id\n        start\n        end\n        completed\n        instanceId\n        encounterId\n        scoreboardEntries {\n          itemRating\n          archetype\n          deaths\n          damage\n          healing\n        }\n        encounter {\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetInstances(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: InstanceFilterInput\n  ) {\n    instances(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n    ) {\n      nodes {\n        id\n        name\n        encounters {\n          id\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetInstances(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: InstanceFilterInput\n  ) {\n    instances(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n    ) {\n      nodes {\n        id\n        name\n        encounters {\n          id\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetItemInfo($id: ID!) {\n    item(id: $id) {\n      id\n      name\n      description\n      careerRestriction\n      description\n      rarity\n      itemLevel\n      iconUrl\n      stats {\n        stat\n        value\n      }\n      type\n      levelRequirement\n      renownRankRequirement\n      slot\n      armor\n      careerRestriction\n      talismanSlots\n      speed\n      dps\n      itemSet {\n        id\n        name\n        items {\n          id\n          name\n          iconUrl\n        }\n        bonuses {\n          itemsRequired\n          bonus {\n            ... on Ability {\n              description\n              __typename\n            }\n            ... on ItemStat {\n              stat\n              value\n              percentage\n              __typename\n            }\n          }\n        }\n      }\n      buffs {\n        id\n        description\n      }\n      soldByVendors {\n        totalCount\n      }\n      usedToPurchase {\n        totalCount\n      }\n      rewardedFromQuests {\n        totalCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetItemInfo($id: ID!) {\n    item(id: $id) {\n      id\n      name\n      description\n      careerRestriction\n      description\n      rarity\n      itemLevel\n      iconUrl\n      stats {\n        stat\n        value\n      }\n      type\n      levelRequirement\n      renownRankRequirement\n      slot\n      armor\n      careerRestriction\n      talismanSlots\n      speed\n      dps\n      itemSet {\n        id\n        name\n        items {\n          id\n          name\n          iconUrl\n        }\n        bonuses {\n          itemsRequired\n          bonus {\n            ... on Ability {\n              description\n              __typename\n            }\n            ... on ItemStat {\n              stat\n              value\n              percentage\n              __typename\n            }\n          }\n        }\n      }\n      buffs {\n        id\n        description\n      }\n      soldByVendors {\n        totalCount\n      }\n      usedToPurchase {\n        totalCount\n      }\n      rewardedFromQuests {\n        totalCount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchItems(\n    $query: ItemFilterInput\n    $usableByCareer: Career\n    $hasStats: [Stat!]\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    items(\n      where: $query\n      usableByCareer: $usableByCareer\n      hasStats: $hasStats\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        iconUrl\n        name\n        careerRestriction\n        description\n        type\n        slot\n        rarity\n        armor\n        dps\n        speed\n        levelRequirement\n        renownRankRequirement\n        itemLevel\n        talismanSlots\n        itemSet {\n          id\n          name\n          items {\n            id\n          }\n          bonuses {\n            itemsRequired\n            bonus {\n              ... on Ability {\n                description\n                __typename\n              }\n              ... on ItemStat {\n                stat\n                value\n                percentage\n                __typename\n              }\n            }\n          }\n        }\n        buffs {\n          id\n          description\n        }\n        stats {\n          stat\n          value\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchItems(\n    $query: ItemFilterInput\n    $usableByCareer: Career\n    $hasStats: [Stat!]\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    items(\n      where: $query\n      usableByCareer: $usableByCareer\n      hasStats: $hasStats\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        iconUrl\n        name\n        careerRestriction\n        description\n        type\n        slot\n        rarity\n        armor\n        dps\n        speed\n        levelRequirement\n        renownRankRequirement\n        itemLevel\n        talismanSlots\n        itemSet {\n          id\n          name\n          items {\n            id\n          }\n          bonuses {\n            itemsRequired\n            bonus {\n              ... on Ability {\n                description\n                __typename\n              }\n              ... on ItemStat {\n                stat\n                value\n                percentage\n                __typename\n              }\n            }\n          }\n        }\n        buffs {\n          id\n          description\n        }\n        stats {\n          stat\n          value\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetKill($id: ID!) {\n    kill(id: $id, includeAssists: true) {\n      scenario {\n        id\n        name\n      }\n      instanceId\n      skirmish {\n        id\n      }\n      time\n      position {\n        zoneId\n        zone {\n          name\n        }\n        x\n        y\n        mapSetup {\n          nwCornerX\n          nwCornerY\n          seCornerX\n          seCornerY\n        }\n      }\n      victim {\n        level\n        renownRank\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n      }\n      attackers {\n        damagePercent\n        level\n        renownRank\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n      }\n      damage {\n        attackerType\n        damageType\n        attacker {\n          id\n        }\n        ability {\n          id\n          name\n          iconUrl\n        }\n        damageAmount\n      }\n      deathblow {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetKill($id: ID!) {\n    kill(id: $id, includeAssists: true) {\n      scenario {\n        id\n        name\n      }\n      instanceId\n      skirmish {\n        id\n      }\n      time\n      position {\n        zoneId\n        zone {\n          name\n        }\n        x\n        y\n        mapSetup {\n          nwCornerX\n          nwCornerY\n          seCornerX\n          seCornerY\n        }\n      }\n      victim {\n        level\n        renownRank\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n      }\n      attackers {\n        damagePercent\n        level\n        renownRank\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n      }\n      damage {\n        attackerType\n        damageType\n        attacker {\n          id\n        }\n        ability {\n          id\n          name\n          iconUrl\n        }\n        damageAmount\n      }\n      deathblow {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetKills(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $from: Int\n    $to: Int\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { time: { gte: $from, lte: $to } }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetKills(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $from: Int\n    $to: Int\n    $soloOnly: Boolean\n  ) {\n    kills(\n      where: { time: { gte: $from, lte: $to } }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      soloOnly: $soloOnly\n    ) {\n      nodes {\n        id\n        time\n        position {\n          zoneId\n        }\n        scenarioId\n        victim {\n          level\n          renownRank\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n        attackers {\n          level\n          renownRank\n          damagePercent\n          character {\n            id\n            career\n            name\n          }\n          guild {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPlayerFeudInfo(\n    $playerId1: ID!\n    $playerIntId1: UnsignedInt!\n    $playerId2: ID!\n    $playerIntId2: UnsignedInt!\n  ) {\n    player1: character(id: $playerId1) {\n      name\n      career\n      level\n      renownRank\n      guildMembership {\n        guild {\n          id\n          name\n        }\n      }\n    }\n\n    player2: character(id: $playerId2) {\n      name\n      career\n      level\n      renownRank\n      guildMembership {\n        guild {\n          id\n          name\n        }\n      }\n    }\n\n    player1kills: kills(\n      first: 0\n      where: {\n        killerCharacterId: { eq: $playerIntId1 }\n        victimCharacterId: { eq: $playerIntId2 }\n      }\n    ) {\n      totalCount\n    }\n\n    player2kills: kills(\n      first: 0\n      where: {\n        killerCharacterId: { eq: $playerIntId2 }\n        victimCharacterId: { eq: $playerIntId1 }\n      }\n    ) {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetPlayerFeudInfo(\n    $playerId1: ID!\n    $playerIntId1: UnsignedInt!\n    $playerId2: ID!\n    $playerIntId2: UnsignedInt!\n  ) {\n    player1: character(id: $playerId1) {\n      name\n      career\n      level\n      renownRank\n      guildMembership {\n        guild {\n          id\n          name\n        }\n      }\n    }\n\n    player2: character(id: $playerId2) {\n      name\n      career\n      level\n      renownRank\n      guildMembership {\n        guild {\n          id\n          name\n        }\n      }\n    }\n\n    player1kills: kills(\n      first: 0\n      where: {\n        killerCharacterId: { eq: $playerIntId1 }\n        victimCharacterId: { eq: $playerIntId2 }\n      }\n    ) {\n      totalCount\n    }\n\n    player2kills: kills(\n      first: 0\n      where: {\n        killerCharacterId: { eq: $playerIntId2 }\n        victimCharacterId: { eq: $playerIntId1 }\n      }\n    ) {\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetQuestInfo($id: ID!) {\n    quest(id: $id) {\n      id\n      name\n      type {\n        isGroup\n        isTravel\n        isTome\n        isRvR\n        isPlayerKill\n        isEpic\n      }\n      xp\n      gold\n      choiceCount\n      rewardsChoice {\n        count\n        item {\n          id\n          iconUrl\n          name\n        }\n      }\n      rewardsGiven {\n        count\n        item {\n          id\n          iconUrl\n          name\n        }\n      }\n      description\n      objectives {\n        description\n        count\n      }\n      journalEntry\n      raceRestriction\n      careerRestriction\n      minLevel\n      maxLevel\n      minRenown\n      maxRenown\n      starterCreatures {\n        id\n        name\n        realm\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetQuestInfo($id: ID!) {\n    quest(id: $id) {\n      id\n      name\n      type {\n        isGroup\n        isTravel\n        isTome\n        isRvR\n        isPlayerKill\n        isEpic\n      }\n      xp\n      gold\n      choiceCount\n      rewardsChoice {\n        count\n        item {\n          id\n          iconUrl\n          name\n        }\n      }\n      rewardsGiven {\n        count\n        item {\n          id\n          iconUrl\n          name\n        }\n      }\n      description\n      objectives {\n        description\n        count\n      }\n      journalEntry\n      raceRestriction\n      careerRestriction\n      minLevel\n      maxLevel\n      minRenown\n      maxRenown\n      starterCreatures {\n        id\n        name\n        realm\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetQuests(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: QuestFilterInput\n  ) {\n    quests(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n    ) {\n      nodes {\n        id\n        name\n        type {\n          isGroup\n          isTravel\n          isTome\n          isRvR\n          isPlayerKill\n          isEpic\n        }\n        repeatableType\n        xp\n        gold\n        choiceCount\n        rewardsChoice {\n          count\n          item {\n            id\n            iconUrl\n            name\n          }\n        }\n        rewardsGiven {\n          count\n          item {\n            id\n            iconUrl\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetQuests(\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n    $where: QuestFilterInput\n  ) {\n    quests(\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n      where: $where\n    ) {\n      nodes {\n        id\n        name\n        type {\n          isGroup\n          isTravel\n          isTome\n          isRvR\n          isPlayerKill\n          isEpic\n        }\n        repeatableType\n        xp\n        gold\n        choiceCount\n        rewardsChoice {\n          count\n          item {\n            id\n            iconUrl\n            name\n          }\n        }\n        rewardsGiven {\n          count\n          item {\n            id\n            iconUrl\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetRankedLeaderboardSeasons {\n    rankedSeasons {\n      id\n      name\n      start\n      end\n      mainSeason\n    }\n  }\n"): (typeof documents)["\n  query GetRankedLeaderboardSeasons {\n    rankedSeasons {\n      id\n      name\n      start\n      end\n      mainSeason\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetScenarioInfo($id: ID!) {\n    scenario(id: $id) {\n      id\n      scenario {\n        id\n        name\n        zone {\n          id\n        }\n      }\n      startTime\n      endTime\n      winner\n      points\n      queueType\n      scoreboardEntries {\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        team\n        level\n        renownRank\n        quitter\n        protection\n        kills\n        deathBlows\n        deaths\n        damage\n        healing\n        objectiveScore\n        killsSolo\n        killDamage\n        healingSelf\n        healingOthers\n        protectionSelf\n        protectionOthers\n        damageReceived\n        resurrectionsDone\n        healingReceived\n        protectionReceived\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetScenarioInfo($id: ID!) {\n    scenario(id: $id) {\n      id\n      scenario {\n        id\n        name\n        zone {\n          id\n        }\n      }\n      startTime\n      endTime\n      winner\n      points\n      queueType\n      scoreboardEntries {\n        character {\n          id\n          name\n          career\n        }\n        guild {\n          id\n          name\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        team\n        level\n        renownRank\n        quitter\n        protection\n        kills\n        deathBlows\n        deaths\n        damage\n        healing\n        objectiveScore\n        killsSolo\n        killDamage\n        healingSelf\n        healingOthers\n        protectionSelf\n        protectionOthers\n        damageReceived\n        resurrectionsDone\n        healingReceived\n        protectionReceived\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Search(\n    $query: String!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    search(\n      query: $query\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        __typename\n        id\n        name\n        ... on Character {\n          level\n          career\n          renownRank\n          guildMembership {\n            guild {\n              id\n              name\n            }\n          }\n        }\n        ... on Guild {\n          level\n          realm\n          leader {\n            id\n            name\n          }\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n          members {\n            totalCount\n          }\n        }\n        ... on Item {\n          iconUrl\n          description\n          type\n          slot\n          rarity\n          itemLevel\n          itemSet {\n            id\n            name\n          }\n        }\n        ... on Quest {\n          questType: type {\n            isGroup\n            isTravel\n            isTome\n            isRvR\n            isPlayerKill\n            isEpic\n          }\n          repeatableType\n          minLevel\n          xp\n          gold\n          journalEntry\n          questDescription: description\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query Search(\n    $query: String!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    search(\n      query: $query\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        __typename\n        id\n        name\n        ... on Character {\n          level\n          career\n          renownRank\n          guildMembership {\n            guild {\n              id\n              name\n            }\n          }\n        }\n        ... on Guild {\n          level\n          realm\n          leader {\n            id\n            name\n          }\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n          members {\n            totalCount\n          }\n        }\n        ... on Item {\n          iconUrl\n          description\n          type\n          slot\n          rarity\n          itemLevel\n          itemSet {\n            id\n            name\n          }\n        }\n        ... on Quest {\n          questType: type {\n            isGroup\n            isTravel\n            isTome\n            isRvR\n            isPlayerKill\n            isEpic\n          }\n          repeatableType\n          minLevel\n          xp\n          gold\n          journalEntry\n          questDescription: description\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchGuilds(\n    $query: String!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    guilds(\n      where: { name: { contains: $query } }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        name\n        level\n        leader {\n          id\n          level\n          name\n          renownRank\n        }\n        members {\n          totalCount\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchGuilds(\n    $query: String!\n    $first: Int\n    $last: Int\n    $before: String\n    $after: String\n  ) {\n    guilds(\n      where: { name: { contains: $query } }\n      first: $first\n      last: $last\n      before: $before\n      after: $after\n    ) {\n      nodes {\n        id\n        name\n        level\n        leader {\n          id\n          level\n          name\n          renownRank\n        }\n        members {\n          totalCount\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSkirmishInfo($id: ID!) {\n    skirmish(id: $id) {\n      id\n      instance {\n        id\n        scenario {\n          id\n          name\n        }\n      }\n      primaryZone {\n        id\n        name\n      }\n      startTime\n      endTime\n      heatmap {\n        x\n        y\n        count\n      }\n      numberOfKills\n      numberOfKillsOrder\n      numberOfKillsDestruction\n      numberOfPlayers\n      numberOfPlayersOrder\n      numberOfPlayersDestruction\n      topGuildsByPlayers {\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        count\n      }\n      topGuildsByKills {\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSkirmishInfo($id: ID!) {\n    skirmish(id: $id) {\n      id\n      instance {\n        id\n        scenario {\n          id\n          name\n        }\n      }\n      primaryZone {\n        id\n        name\n      }\n      startTime\n      endTime\n      heatmap {\n        x\n        y\n        count\n      }\n      numberOfKills\n      numberOfKillsOrder\n      numberOfKillsDestruction\n      numberOfPlayers\n      numberOfPlayersOrder\n      numberOfPlayersDestruction\n      topGuildsByPlayers {\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        count\n      }\n      topGuildsByKills {\n        guild {\n          id\n          name\n          realm\n          heraldry {\n            emblem\n            pattern\n            color1\n            color2\n            shape\n          }\n        }\n        count\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetZoneHeatmap($id: ID, $from: Long) {\n    killsHeatmap(zoneId: $id, from: $from) {\n      x\n      y\n      count\n    }\n  }\n"): (typeof documents)["\n  query GetZoneHeatmap($id: ID, $from: Long) {\n    killsHeatmap(zoneId: $id, from: $from) {\n      x\n      y\n      count\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;